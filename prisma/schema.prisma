generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(cuid())
  email                  String        @unique
  name                   String?
  image                  String?
  plan                   String        @default("FREE")
  stripeCustomerId       String?
  stripeSubscriptionId   String?
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  qrCodeLimit            Int           @default(3)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  emailVerified          Boolean       @default(false)
  isActive               Boolean       @default(true)
  lastLogin              DateTime?
  lockedUntil            DateTime?
  loginAttempts          Int           @default(0)
  passwordHash           String?
  salt                   String?
  accounts               Account[]
  qrCodes                QRCode[]
  sessions               Session[]
  userSessions           UserSession[]

  @@index([email])
  @@index([lastLogin])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  token     String   @unique
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([token])
  @@map("user_sessions")
}

model QRCode {
  id          String      @id @default(cuid())
  name        String
  shortId     String      @unique
  targetUrl   String
  isActive    Boolean     @default(true)
  enableAI    Boolean     @default(false)
  totalScans  Int         @default(0)
  lastScanned DateTime?
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  qrColor     String      @default("#000000")
  qrOptions   String?
  qrSize      Int         @default(256)
  qrStyle     String      @default("classic")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  variants    QRVariant[]
  scans       Scan[]

  @@index([shortId, isActive])
  @@index([userId, createdAt])
  @@index([isActive, totalScans])
  @@index([lastScanned])
  @@map("qr_codes")
}

model QRVariant {
  id         String   @id @default(cuid())
  qrCodeId   String
  name       String
  targetUrl  String
  weight     Int      @default(50)
  isActive   Boolean  @default(true)
  conditions String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  qrCode     QRCode   @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
  scans      Scan[]

  @@map("qr_variants")
}

model Scan {
  id          String     @id @default(cuid())
  qrCodeId    String
  variantId   String?
  userAgent   String?
  ipAddress   String?    @db.VarChar(45)
  country     String?
  city        String?
  device      String?
  os          String?
  browser     String?
  userSegment String?
  scannedAt   DateTime   @default(now())
  qrCode      QRCode     @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
  variant     QRVariant? @relation(fields: [variantId], references: [id])

  @@index([qrCodeId, scannedAt])
  @@index([scannedAt])
  @@index([device, scannedAt])
  @@index([country, scannedAt])
  @@index([qrCodeId, device, scannedAt])
  @@map("scans")
}
